#!/bin/bash

########################################
#CHECK if the user entered a file name.#
########################################
########################################
#------------missingFileName-----------#
########################################


missingFileName()
{
	if
		#missing arguments
		[ $1 -eq 0 ] 2> /dev/null
	then
		echo "rm: missing operand - no file given"
	fi
}

########################################
#------------setDirectory--------------#
########################################

setDirectory() 
{
	if [ -f ~/.rm.cfg ] ; then
		contents=$(cat ~/.rm.cfg)
		if [  -n "$RMCFG" ] ; then
			safeDeleteDirectory="$RMCFG"
			echo "$safeDeleteDirectory env variable"
			#environment variable found

		elif [ -f "$RMCFG_FILE" ] ; then
			#use the path from .rm.cfg since file exists
			safeDeleteDirectory="$contents"
			echo ".rm.cfg exists with the directory of $safeDeleteDirectory"

		fi
	else
		echo ".rm.cfg doesn't exist"
		#don't do anything and keep it to the default
	fi


}

########################################
#------------createDirectory-----------#
########################################

createDirectory()
{
	#if directory doesn't exist
	if [ ! -d "$safeDeleteDirectory" ] ; then
		echo "Recycling bin doesn't exist. Creating the new directory for the recycling bin"
		mkdir "$safeDeleteDirectory"
	fi
		echo "Recycling bin directory: $safeDeleteDirectory"
}

########################################
#------------removeFile----------------#
########################################
removeFile()
{ 

	fileRestoreInfo=""
	if [ "$1" -eq 1 ] && [ -d "$2" ]; then
		#recursive directory is being deleted
		IFS=$'\n';
		count=$(find "$fileName" -not -path '*/\.*' | tac | wc -l)

		for file in $(find "$fileName" -not -path '*/\.*' | tac);
		do
			fileLocation="$3/$file"
			currentFile=""

			if [ $count -ne 1 ] ; then
				currentFile=$(echo $file | rev | cut -d'/' -f1 | rev)
			else
				currentFile=$(echo $file | cut -d'/' -f1)
			fi

			node=$(ls -id $fileLocation | grep -w "$file" | cut -d' ' -f1 )
			actualName=$(echo $currentFile"_"$node)
			mv $fileLocation $4"/"$actualName 2>/dev/null 
			fileRestoreInfo=$actualName":"$(pwd)"/"$currentFile 
			count=$(($count+1))
			echo $fileRestoreInfo >> ~/.restore.info

		done

	else #non recursive directory is being deleted
		mv $2 $4"/"$5 2>/dev/null
		echo $6 >> ~/.restore.info
	fi
}



#####################################################
#MOVING the renamed file to the "deleted" directory.#
#####################################################

########################################
#------------moving_file---------------#
########################################

moving_file()
{

	#current directory
	currentDirectory=$(pwd)

	# Filename supplied by the argument
	fileName=$1

	# create file inode using ls -i
	nodeName=$(ls -i $fileName | cut -d' ' -f1)

	# Includes the filename and the nodename
	newFileName=$fileName"_"$nodeName

	# get the fileRestore Information
	fileRestoreInfo=$newFileName":"$(pwd)"/"$fileName 

	positiveResponse=y

	#####################################
	#CHECK if file to-be deleted exists.#
	#####################################
	if [ ! -f $1 ] && [ ! -d $1 ] ;
	then
		echo "rm: cannot remove \`$1': No such file or directory"
	#file and directory exists
	elif [ -d $1 ] && [ $r_check -eq 0 ]; then
		echo "File is a directory. Please use the -r tag."
	#file actually exists
	else 
		#####################
		#CHECK for "i" flag.#
		#####################
		if [ "$i_check" -eq 1 ] ;
		then
			read -p "rm: remove file \`$fileName'? " iCheckResponse
			iResponse=$(echo $iCheckResponse | tr '[:upper:]' '[:lower:]' | cut -c1)
			if [ $iResponse = $positiveResponse ] 2> /dev/null ; then
				#####################
				#CHECK for "v" flag.#
				#####################
				if [ "$v_check" -eq 1 ] ; then
					echo "removed \`$1'"
					removeFile $r_check $fileName $currentDirectory $safeDeleteDirectory $newFileName $fileRestoreInfo
				else
					removeFile $r_check $fileName $currentDirectory $safeDeleteDirectory $newFileName $fileRestoreInfo
				fi
				#!!!!!-----END OF "v" CHECK-----!!!!!
				echo $fileRestoreInfo >> ~/.restore.info
			fi
		#!!!!!-----END OF "i" CHECK-----!!!!!

		#####################
		#CHECK for "v" flag.#
		#####################
		elif [ "$v_check" -eq 1 ] 2> /dev/null ; then
			echo "removed \`$1'"
			removeFile $r_check $fileName $currentDirectory $safeDeleteDirectory $newFileName $fileRestoreInfo
		
		#####################
		# NO FLAG SELECTED  #
		#####################
		else
			removeFile $r_check $fileName $currentDirectory $safeDeleteDirectory $newFileName $fileRestoreInfo
		fi
		#!!!!!-----END OF "v" CHECK-----!!!!!
	fi
	#!!!!!-----END OF FILE CHECK-----!!!!!

#!!!!!-----END OF MOVING-----!!!!!
}

##################################
#---------------check------------#
##################################

check()
{

	#check flags
	OPTIND=1
	while getopts virVIR opt
	do
		opt=$(echo "$opt" | tr [:upper:] [:lower:])
		case $opt in
		i)
			echo "i_check has been selected"
			i_check=1
		;;
		v)
			echo "v_check has been selected"
			v_check=1
		;;
		r)
			echo "r_check has been selected"
			r_check=1
		;;
		esac
	done
	#end of checking flags
	#!!!!!-----END OF CHECK-----!!!!!

}


##################################
#---------------main-------------#
##################################


main()
{
	#####################
	#LOOP for next file.#
	#####################
	for nextFile in "$@"
	do
		moving_file $nextFile
	done

}

#set variables
i_check=0
v_check=0
r_check=0
safeDeleteDirectory=~/deleted
RMCFG_FILE=~/.rm.cfg

missingFileName $#
check $@

#This will shift the arguments from the arguments list so that the modifiers are ignored(if given) 
if [ $i_check -eq 1 ] || [ $v_check -eq 1 ] || [ $r_check -eq 1 ]; then
	shift $((OPTIND-1))
fi

setDirectory
createDirectory
main $@
